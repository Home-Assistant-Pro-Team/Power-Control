input_number:
  ritardo_distacco_carico:
    name: Ritardo Distacco Carico
    mode: box
    icon: mdi:timelapse
    unit_of_measurement: "min"
    min: 3
    max: 183
    step: 5
  ripristino_carico:
    name: Ripristino Carico
    mode: box
    icon: mdi:power-plug
    unit_of_measurement: "W"
    min: 99
    max: 8000
    step: 100
  distacco_carico:
    name: Distacco carico
    icon: mdi:power-plug-off
    min: 99
    max: 11000
    step: 100
    unit_of_measurement: "W"
    mode: box
  distacco_urgente:
    name: Distacco Urgente
    icon: mdi:alert
    min: 99
    max: 11000
    step: 100
    unit_of_measurement: "W"
    mode: box

timer:
  distacco_carico:
    restore: true
    name: Ritardo Distacco Carico

template:
  - select:
      - name: "Escludi dispositivi dal ripristino carico"
        state: "{{ states('sensor.dispositivi_esclusi_dal_ripristino_carico') }}"
        options: >-
          {% from 'power_control.jinja' import entities_control %}
            {{ ['RESET'] + expand(entities_control().split()) | map(attribute='name') | list }}
        select_option:
          - event: customizations
            event_data:
              types: power_control
              sensor_select: "{{ option }}"
  - sensor:
      - name: Lista carichi
        state: >-
          {% from 'power_control.jinja' import entities_control %}
            {{ entities_control().split() | count }}
        attributes:
          list_device: >-
            {% from 'power_control.jinja' import entities_control %}
              {{ entities_control() }}
          list_device_name: >-
            {% from 'power_control.jinja' import entities_control %}
            {{ expand(entities_control().split()) | map(attribute='name') | list }}
          list_state_switch: >-
            {% from 'power_control.jinja' import entities_control %}
            {{ expand(entities_control().split()) | map(attribute='state') | list }}

  - sensor:
      - name: Lista dispositivi accesi
        state: >-
          {% from 'power_control.jinja' import list_device %}
            {{ list_device().split() | count }}
        attributes:
          list_device_name: >-
            {% from 'power_control.jinja' import list_device %}
              {{ expand(list_device().split()) | map(attribute='name') | list }}

  - sensor:
      - name: Ultimo dispositivo acceso
        state: >-
          {% set a = states('sensor.check_ultimo_acceso').split() | default %}
          {% set b = state_attr('sensor.check_ultimo_acceso', 'old_state').split() | default %}
          {% set result = (a | list | reject('in', b) | list)[0] %}
            {{ result if result is defined else 'Nessuno' }}
  - trigger:
      - platform: state
        entity_id: sensor.lista_dispositivi_accesi
    sensor:
      - name: check_ultimo_acceso
        state: >-
          {% from 'power_control.jinja' import list_device %}
          {% set power = list_device() %}
            {{ power }}
        attributes:
          old_state: "{{ this.state }}"
  - trigger:
      - platform: event
        event_type: customizations
        event_data:
          types: power_control
    sensor:
      - name: Dispositivi esclusi dal ripristino carico
        state: "{{ trigger.event.data.sensor_select }}"
        attributes:
          list_exclude: >-
            {% from 'power_control.jinja' import entities_control %}
            {% set list_power = entities_control() %}
            {% set lists = this.attributes.list_exclude %}
              {% if option == 'RESET' %}
              {% else %}
                {% for device in states if device.name|lower == trigger.event.data.sensor_select | lower and device.entity_id in list_power %}
                  {% if device.entity_id in lists %}
                    {{ lists | list | select('ne',device.entity_id) | list }}
                  {% else %}
                    {% set ns = namespace(entities=lists | list | select('ne', device.entity_id) | list) %}
                      {{ ns.entities + [device.entity_id] }}
                  {% endif %}
                {% endfor %}
              {% endif %}
  - trigger:
      - platform: state
        entity_id: input_boolean.check_distacco
        to: "off"
        for:
          minutes: 1
      - platform: event
        event_type: customizations
        event_data:
          types: notify_power_control
    sensor:
      - name: marquee power control
        state: >-
          {% if trigger.entity_id == 'input_boolean.check_distacco' %}
            {{ 'Ultimo intervento effettuato ' + relative_time(trigger.to_state.last_changed) | replace('years', 'anni') | replace('year', 'anno') | replace('days','giorno') | replace('day','giorni') | replace ('hours','ore') | replace ('hour','ora') | replace ('minutes','minuti') | replace ('minute','minuto') | replace ('seconds','secondi') + ' fa'}}
          {% else %}
            {{ trigger.event.data.message|default('Messaggio non impostato') }}
          {% endif %}

input_text:
  list_power_control:
    initial: "none"
    max: 255

input_boolean:
  check_distacco:
    initial: "off"

automation:
  - alias: Power control
    id: power_control
    mode: restart
    variables:
      power: >-
        {% from 'power_control.jinja' import power_control %}
        {{ (power_control() | from_json)['Sensore W'] }}
    trigger:
      - platform: template
        alias: "Superamento soglia 2 minuti prima del distacco"
        value_template: >-
          {% if state_attr('timer.distacco_carico', 'finishes_at') is not none %}
            {{ now() > as_datetime(state_attr('timer.distacco_carico', 'finishes_at')) - timedelta(minutes=2) }}
          {% else %}
            False
          {% endif %}
        id: preavviso_distacco
      - platform: template
        alias: "Raggiunta soglia per distacco avvia timer"
        value_template: >-
          {% from 'power_control.jinja' import power_control %}
          {% set power = states[(power_control() | from_json)['Sensore W']].state | int(0) %}
            {{ power > states('input_number.distacco_carico') | int(0) }}
        id: soglia_distacco
      - platform: template
        alias: "Inizio distacco carichi URGENTE"
        value_template: >-
          {% from 'power_control.jinja' import power_control %}
          {% set power = states[(power_control() | from_json)['Sensore W']].state | int(0) %}
            {{ power > states('input_number.distacco_urgente') | int(0) }}
        id: inizio_distacco
      - platform: event
        alias: "Inizio distacco carichi"
        event_type: timer.finished
        event_data:
          entity_id: timer.distacco_carico
        id: inizio_distacco
      - platform: template
        alias: "Consumi tornati regolare rispistina carichi"
        value_template: >-
          {% from 'power_control.jinja' import power_control %}
          {% set power = states[(power_control() | from_json)['Sensore W']].state | int(0) %}
            {{ power < states('input_number.ripristino_carico')|int(0) }}
        for:
          seconds: "20"
        id: ripristino_carico
    action:
      - alias: Notifica superamento soglia 2 minuti prima del distacco
        if:
          - "{{ trigger.id == 'preavviso_distacco' and states(power) | int(0) < states('input_number.distacco_urgente') | int(0) }}"
        then:
          - alias: INVIA NOTIFICA
            event: customizations
            event_data:
              types: notify_power_control
              tag: helper1power
              #critical: 1.0
              title: Consumi Elevati
              message: "{{ 'Superati i ' ~ states(power,  with_unit=true) }}"
      - alias: Raggiunta soglia per distacco avvia timer
        if:
          - "{{ trigger.id == 'soglia_distacco' }}"
        then:
          - alias: Imposta timer di attesa
            service: timer.start
            data:
              duration: "00:{{ states('input_number.ritardo_distacco_carico') | int(0) }}:00"
            target:
              entity_id: timer.distacco_carico
      - alias: Distacco carichi
        if:
          - "{{ trigger.id == 'inizio_distacco' }}"
        then:
          - alias: Cancella timer per evitare altro trigger
            service: timer.cancel
            target:
              entity_id: timer.distacco_carico
          - alias: Elimina lista text
            service: input_text.set_value
            data:
              value: none
            target:
              entity_id: "input_text.list_power_control"
          - repeat:
              until:
                - >-
                  {% from 'power_control.jinja' import power_control %}
                  {{ states[(power_control() | from_json)['Sensore W']].state | int(0) > states('input_number.distacco_carico') | int(0) }}
              sequence:
                - alias: Spegni device della lista se acceso negli ultimi 30sec per distacco urgente ed escludilo dal ripristino
                  if:
                    - "{{ states(power) | int(0) > states('input_number.distacco_urgente') | int(0) }}"
                    - "{{ now() < states['sensor.ultimo_dispositivo_acceso'].last_changed + timedelta(seconds=30) and not is_state('sensor.ultimo_dispositivo_acceso', 'Nessuno') }}"
                  then:
                    - alias: INVIA NOTIFICA
                      event: customizations
                      event_data:
                        #critical: 1
                        types: notify_power_control
                        title: --DISTACCO URGENTE--
                        message: "{{ 'Spegnimento ' ~ states[states('sensor.ultimo_dispositivo_acceso')].name ~ '. Superati i ' ~ states(power,  with_unit=true)  }}"
                    - alias: Spegni il carico
                      service: homeassistant.turn_off
                      target:
                        entity_id: "{{ states('sensor.ultimo_dispositivo_acceso') }}"
                    - alias: Attiva bollean per sapere che distacco carichi Ã¨ stato attivato
                      service: input_boolean.turn_on
                      target:
                        entity_id: input_boolean.check_distacco
                    - alias: Ritardo prossimo controllo per distacco
                      delay:
                        seconds: 10
                  else:
                    - alias: Esegui loop per distacco carichi
                      repeat:
                        count: >-
                          {% from 'power_control.jinja' import list_device %}
                            {{ list_device().split() | count + 1 }}
                        sequence:
                          - variables:
                              power_device: >-
                                {% from 'power_control.jinja' import list_device %}
                                  {{ list_device().split() }}
                          - choose:
                              - conditions:
                                  - alias: Verifica se consumo ancora elevato
                                    condition: template
                                    value_template: >-
                                      {{ states(power) | int(0) > states('input_number.distacco_carico') | int(0) }}
                                  - alias: Controlla che ci siano device in uso
                                    condition: template
                                    value_template: "{{ power_device | count > 0 }}"
                                sequence:
                                  - alias: Attiva bollean per sapere che distacco carichi Ã¨ stato attivato
                                    service: input_boolean.turn_on
                                    target:
                                      entity_id: input_boolean.check_distacco
                                  - alias: Salva lista carichi spenti
                                    service: input_text.set_value
                                    data:
                                      value: >-
                                        {{ power_device[0] + ( ' ' + states('input_text.list_power_control') if not is_state('input_text.list_power_control', 'none') else ' ') }}
                                    target:
                                      entity_id: input_text.list_power_control
                                  - alias: INVIA NOTIFICA
                                    event: customizations
                                    event_data:
                                      types: notify_power_control
                                      message: "{{ 'Spegnimento ' ~ states[power_device[0]].name ~ '. Superati i ' ~ states(power,  with_unit=true) }}"
                                  - alias: Spegni il carico
                                    service: homeassistant.turn_off
                                    target:
                                      entity_id: "{{ power_device[0] }}"
                                  - alias: Ritardo prossimo controllo per distacco
                                    delay:
                                      seconds: 20
                            default:
                              - alias: Verifica se consumo ancora elevato
                                condition: template
                                value_template: "{{ states(power) | int(0) > states('input_number.distacco_carico') | int(0) }}"
                              - alias: INVIA NOTIFICA
                                event: customizations
                                event_data:
                                  types: notify_power_control
                                  message: "{{ 'ATTENZIONE. Superati i ' ~ states(power,  with_unit=true) ~ '! Non ci sono elettrodomestici da spegnere.' }}"
                              - stop: TERMINA DISTACCA PER MANCANDA DISPOSITIVI
      - alias: Ripristino carico
        if:
          - "{{ trigger.id == 'ripristino_carico' }}"
        then:
          - service: timer.cancel
            target:
              entity_id: timer.distacco_carico
          - if:
              - alias: Controllo se Ã¨ scattato il distacco carichi
                condition: template
                value_template: "{{ is_state('input_boolean.check_distacco', 'on') }}"
            then:
              - alias: Ripristino carico
                repeat:
                  for_each: >-
                    {% set output = namespace(state_home=[]) %}
                    {% for device in states if device.entity_id in state_attr('sensor.dispositivi_esclusi_dal_ripristino_carico', 'list_exclude') %}
                        {% set output.state_home = output.state_home + [device.entity_id] %}
                    {% endfor %}
                    {{states('input_text.list_power_control').split() | reject('in', output.state_home + ['none']) | list }}
                  sequence:
                    - alias: INVIA NOTIFICA
                      event: customizations
                      event_data:
                        types: notify_power_control
                        message: "{{ 'Il consumo Ã¨ tornato nei limiti. ' ~ states[repeat.item].name + ' Ã¨ stato acceso.' }}"
                    - alias: Ripristina ultimo carico spento e non escluso
                      service: homeassistant.turn_on
                      target:
                        entity_id: "{{ repeat.item }}"
                    - alias: Attendi per ripristinare elettrodomestici
                      delay:
                        seconds: "20"
              - alias: INVIA NOTIFICA
                event: customizations
                event_data:
                  types: notify_power_control
                  message: I consumi sono tornati regolari e tutti gli elettrodomestici sono stati ripristinati
              - alias: Imposta il boolean in off per indicare che il ripristiono
                service: input_boolean.turn_off
                target:
                  entity_id: input_boolean.check_distacco
